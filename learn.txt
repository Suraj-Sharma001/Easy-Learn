"permision": ["storage", "activeTab", "scripting"]
in this
storage : give the permission to take data from chrome storage
activeTab: allow the extension the use current tab 
scripting: give me permision to add data in web page 

host_permission: ["<all_urls>"] -> all website can use we can explicetly mention website also

----------------------------Script.js-----------------------------------------------

1️⃣ Listen for Messages from the Extension
chrome.runtime.onMessage.addEventListener((req, sender, Sendres) => {
This sets up a listener that waits for messages sent from other parts of the Chrome extension (like popup.js or content.js).
req → Contains the data sent in the message.
sender → Provides details about who sent the message (not used in this case).
Sendres → A function that sends a response back to the sender.

2️⃣ Check if the Message is a 'search' Request
if (req.action === 'search') {
This checks if the received message has an action type of "search".
If it is, then we proceed with handling the search request.

3️⃣ Send a Request to an API
fetch('/url', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer API-KEY'
    },
    body: JSON.stringfy({query: req.query})
})
fetch('/url', {...}) → Sends a request to '/url' (this should be the real API endpoint).
method: 'POST' → Specifies that this is a POST request (sending data).
headers → Tells the server that we're sending JSON data and includes an API key.
body: JSON.stringify({query: req.query}) → Sends the search query as a JSON object.

4️⃣ Process the API Response
.then(res => res.json())
.then(data => Sendres({result: data.result}))
.then(res => res.json()) → Converts the response from the API into JSON format.
.then(data => Sendres({result: data.result})) → Extracts the result from the response and sends it back to the sender.

5️⃣ Handle Errors
.catch(err => Sendres({result: "Error in fetching..." + err.message}))
If anything goes wrong (like a network issue or invalid API response), this will send back an error message.

6️⃣ Exit the Function
return ture;
This makes sure the function exits properly after handling the request.
